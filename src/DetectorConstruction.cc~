//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file DetectorConstruction.cc
/// \brief Implementation of the DetectorConstruction class
//
//

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "DetectorConstruction.hh"
#include "DetectorMessenger.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "PrimaryGeneratorAction.hh"

#include "G4Box.hh"
#include "G4Sphere.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SubtractionSolid.hh"
#include "G4VSolid.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"
#include "G4RunManager.hh"

#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
:G4VUserDetectorConstruction(),
 worldP(0), worldL(0), fMaterial(0), fDetectorMessenger(0)
{
  fBoxX = 13.0*m; //World size X
  fBoxY = 12.8*m; //World size Y
  fBoxZ = 5.9*m;  //World size Z
  polyThickness = 50*cm; //thickness of PE shielding
  pbThickness = 2.5*cm;  //thickness of outter lead shielding
  window = true;
  monitorR = 10.*cm;
  monitorD = 100.*cm;
  windowX = 12.*cm;
  windowY = 12.*cm;
  DefineMaterials();
  SetMaterial("G4_AIR");   //Sets the material of the world
  fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{ delete fDetectorMessenger;}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  return ConstructVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::DefineMaterials()
{
  // specific element name for thermal neutronHP
  // (see G4ParticleHPThermalScatteringNames.cc)

  G4int ncomponents, natoms;

  // pressurized water
  G4Element* H  = new G4Element("TS_H_of_Water" ,"H" , 1., 1.0079*g/mole);
  G4Element* O  = new G4Element("Oxygen"        ,"O" , 8., 16.00*g/mole);
  G4Material* H2O = 
  new G4Material("Water_ts", 1.000*g/cm3, ncomponents=2,
                         kStateLiquid, 593*kelvin, 150*bar);
  H2O->AddElement(H, natoms=2);
  H2O->AddElement(O, natoms=1);
  H2O->GetIonisation()->SetMeanExcitationEnergy(78.0*eV);
  
  // heavy water
  G4Isotope* H2 = new G4Isotope("H2",1,2);
  G4Element* D  = new G4Element("TS_D_of_Heavy_Water", "D", 1);
  D->AddIsotope(H2, 100*perCent);  
  G4Material* D2O = new G4Material("HeavyWater", 1.11*g/cm3, ncomponents=2,
                        kStateLiquid, 293.15*kelvin, 1*atmosphere);
  D2O->AddElement(D, natoms=2);
  D2O->AddElement(O, natoms=1);
  
  // graphite
  G4Isotope* C12 = new G4Isotope("C12", 6, 12);  
  G4Element* C   = new G4Element("TS_C_of_Graphite","C", ncomponents=1);
  C->AddIsotope(C12, 100.*perCent);
  G4Material* graphite = 
  new G4Material("graphite", 2.27*g/cm3, ncomponents=1,
                         kStateSolid, 293*kelvin, 1*atmosphere);
  graphite->AddElement(C, natoms=1);

  // Li-Polyethalene
  G4double density = 1.06*g/cm3;
  G4Material* PE =  G4NistManager::Instance()->FindOrBuildMaterial("G4_POLYETHYLENE");
  G4Isotope* Li7 = new G4Isotope("Lithium-7", 3,4,7.016*g/mole);
  G4Element* Li = new G4Element("Lithium", "Li",  1);
  Li->AddIsotope(Li7, 100.*perCent);
  LiPE = new G4Material("Li-Poly",density,2);
  LiPE->AddMaterial(PE,92.5*perCent);
  LiPE->AddElement(Li,7.5*perCent);
  
 ///G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4Material* DetectorConstruction::MaterialWithSingleIsotope( G4String name,
                           G4String symbol, G4double density, G4int Z, G4int A)
{
 // define a material from an isotope
 //
 G4int ncomponents;
 G4double abundance, massfraction;

 G4Isotope* isotope = new G4Isotope(symbol, Z, A);
 
 G4Element* element  = new G4Element(name, symbol, ncomponents=1);
 element->AddIsotope(isotope, abundance= 100.*perCent);
 
 G4Material* material = new G4Material(name, density, ncomponents=1);
 material->AddElement(element, massfraction=100.*perCent);

 return material;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::ConstructVolumes()
{
  // Cleanup old geometry
  G4GeometryManager::GetInstance()->OpenGeometry();
  G4PhysicalVolumeStore::GetInstance()->Clean();
  G4LogicalVolumeStore::GetInstance()->Clean();
  G4SolidStore::GetInstance()->Clean();
  G4bool checkOverlaps = true;        //option to check for overlapping geometry
  
  G4Box*
  worldS    = new G4Box("World",                             //its name
                        fBoxX/2,fBoxY/2,fBoxZ/2);            //its dimensions

  worldL    = new G4LogicalVolume(worldS,                    //its shape
                                  fMaterial,                 //its material
                                  "World");                  //its name

  worldP    = new G4PVPlacement(0,                          //no rotation
                                G4ThreeVector(),   //at 0,0,0
                                worldL,                     //its logical volume
                                "World",                    //its name
                                0,                          //its mother  volume
                                false,                      //no boolean operation
 			        0,                          //copy number
				checkOverlaps);             //option to check for overlaps
  
  G4double labX = 6.8*m;     //inner X dimension of the lab
  G4double labY = 7*m;       //inner Y dimension of the lab
  G4double labZ = 2.9*m;     //inner Z dimension of the lab
  G4double wallThickness = .33*m;     //thickness of the lab walls


  //create a box with the outer dimensions of the lab
  G4VSolid* wallS = new G4Box("Wall",
			   (labX + 2*wallThickness)/2,
			   (labY + 2*wallThickness)/2,
			   (labZ + 2*wallThickness)/2);

  //create a box with inner dimensions of the lab
  G4VSolid* interiorS = new G4Box("Interior",
			       labX/2,
			       labY/2,
			       labZ/2);

  G4double northWindowX = 1.1*m;     //north window x dimension
  //  G4double northWindowY = .005*m;    //guessing .5cm thickness for window
  G4double northWindowZ = 1.4*m;    //north window z dimension
  G4double doorX = 1.62*m;
  G4double doorZ = 2.11*m;

  //create a solid for the North window cutouts
  G4VSolid* northWindowCutS = new G4Box("cut",
			   	        northWindowX/2,
				        wallThickness/2+.01*m,
				        northWindowZ/2);

  //create a solid for the East window cutouts
  G4VSolid* eastWindowCutS = new G4Box("cut2",
				       wallThickness/2+.01*m,
				       northWindowX/2,
				       northWindowZ/2);

  //create a solid for the door cutout
  G4VSolid* doorCutS = new G4Box("cut3",
				 doorX/2,
				 wallThickness/2+.01*m,
				 doorZ/2);

  //Define some vectors pointing to the centers of the three north windows
  G4ThreeVector northWindow1 = G4ThreeVector(.28*m+(northWindowX/2)-(labX/2), (labY/2)+ (wallThickness/2), 1.43*m+(northWindowZ/2)-labZ/2);
  G4ThreeVector northWindow2 = northWindow1 + G4ThreeVector(1.32*m+northWindowX,0,0);
  G4ThreeVector northWindow3 = northWindow2 + G4ThreeVector(1.32*m+northWindowX,0,0);

  //Define some vectors pointing to the centers of the two east windows
  G4ThreeVector eastWindow1 = G4ThreeVector((labX/2) + (wallThickness/2), -2.43*m - (northWindowX/2) + (labY/2), 1.43*m + (northWindowZ/2)-labZ/2);
  G4ThreeVector eastWindow2 = eastWindow1 - G4ThreeVector(0, 1.65*m+northWindowX, 0);

  //Define a vector pointing to the center of the door
  G4ThreeVector doorPos = G4ThreeVector(-(labX/2)+(doorX/2)+.05*m, -(labY/2) -(wallThickness/2), -(labZ/2)+(doorZ/2));
				     
  //subtract the inner box from the outter to create a shell in the shape
  //and size of the lab
  G4VSolid* labTempS1 = new  G4SubtractionSolid("labS", wallS, interiorS);

  //now do a subtraction for each window
  G4VSolid* labTempS2 = new G4SubtractionSolid("temp2", labTempS1, northWindowCutS,
					       NULL,                //no rotation
					       northWindow1);    //translate to the position of the first window
  G4VSolid* labTempS3 = new G4SubtractionSolid("temp2", labTempS2, northWindowCutS,
					       NULL,                //no rotation
					       northWindow2);    //translate to the position of the second window
  G4VSolid* labTempS4 = new G4SubtractionSolid("temp2", labTempS3, northWindowCutS,
					       NULL,                //no rotation
					       northWindow3);    //translate to the position of the third window
  G4VSolid* labTempS5 = new G4SubtractionSolid("temp2", labTempS4, eastWindowCutS,
					       NULL,                 //no rotation
					       eastWindow1);    //translate to the position of the first easterly window
  G4VSolid* labTempS6 = new G4SubtractionSolid("temp2", labTempS5, eastWindowCutS,
					       NULL,                //no rotation
					       eastWindow2);    //translate to the position of the second easterly window

  //now do a subtraction for the door
  G4VSolid* labS = new G4SubtractionSolid("lab", labTempS6, doorCutS,
					  NULL,
					  doorPos);


  //some variables for the thicknesses
  G4double windowThickness = .5*cm;
  G4double doorThickness = 3*cm;
  
  //now add some volumes for the windows
  //create a solid for the North window cutouts
  G4VSolid* northWindowS = new G4Box("window1",
			   	        northWindowX/2,
				        windowThickness/2,
				        northWindowZ/2);


  //create a solid for the East windows
  G4VSolid* eastWindowS = new G4Box("window2",
				       windowThickness/2,
				       northWindowX/2,
				       northWindowZ/2);

  //create a solid for the door cutout
  G4VSolid* doorS = new G4Box("door",
				 doorX/2,
				 doorThickness,
				 doorZ/2);


  
  G4Material* labWallMaterial = G4NistManager::Instance()->FindOrBuildMaterial("G4_CONCRETE");
  G4Material* windowMaterial = G4NistManager::Instance()->FindOrBuildMaterial("G4_GLASS_PLATE");
  G4Material* doorMaterial = G4NistManager::Instance()->FindOrBuildMaterial("G4_CELLULOSE_CELLOPHANE");

  //create a logical volume for the lab and place it
  labL = new G4LogicalVolume(labS,
			     labWallMaterial,
			     "lab");
  labP = new G4PVPlacement(0,                                 //no rotation
			   G4ThreeVector(0,0, -1.5*m+wallThickness),        //move to the bottom of the world box, we are not interested in what happens below the ground
			   labL,                              //its logical volume
			   "lab",                             //its name
			   worldL,                            //its mother volume
		           false,                             //no boolean operation
			   0,                                 //copy number
			   checkOverlaps);                    //option to check for overlaps

  //create the logical volumes for the windows and doors and place them
  win1L = new G4LogicalVolume(northWindowS,
			      windowMaterial,
			      "window1");
  win1P = new G4PVPlacement(0,
			    northWindow1- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
			    win1L,
			    "window1",
			    worldL,
			    false,
			    0,
			    checkOverlaps);

  win2L = new G4LogicalVolume(northWindowS,
			      windowMaterial,
			      "window2");
  win2P = new G4PVPlacement(0,
			    northWindow2- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
			    win2L,
			    "window2",
			    worldL,
			    false,
			    0,
			    checkOverlaps);
  
  win3L = new G4LogicalVolume(northWindowS,
			      windowMaterial,
			      "window3");
  win3P = new G4PVPlacement(0,
			    northWindow3- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
			    win3L,
			    "window3",
			    worldL,
			    false,
			    0,
			    checkOverlaps);
			    
  win4L = new G4LogicalVolume(eastWindowS,
			      windowMaterial,
			      "window4");
  win4P = new G4PVPlacement(0,
			    eastWindow1- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
			    win4L,
			    "window4",
			    worldL,
			    false,
			    0,
			    checkOverlaps);

  win5L = new G4LogicalVolume(eastWindowS,
			      windowMaterial,
			      "window5");
  win5P = new G4PVPlacement(0,
			    eastWindow2- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
			    win5L,
			    "window5",
			    worldL,
			    false,
			    0,
			    checkOverlaps);

  doorL = new G4LogicalVolume(doorS,
			      doorMaterial,
			      "door");
  doorP = new G4PVPlacement(0,
			    doorPos- G4ThreeVector(0,0, 1.5*m-wallThickness) ,
		            doorL,
			    "door",
		            worldL,
			    false,
			    0,
			    checkOverlaps);
			    
			      
  PrintParameters();

  G4Material* pbShieldMat = G4NistManager::Instance()->FindOrBuildMaterial("G4_Pb");
  G4Material* polyShieldMat = G4NistManager::Instance()->FindOrBuildMaterial("G4_POLYETHYLENE");

  G4double density = 1.04*g/cm3;
  G4Material* PE =  G4NistManager::Instance()->FindOrBuildMaterial("G4_POLYETHYLENE");
  G4Isotope* B11 = new G4Isotope("Boron-11", 5,6,11.009*g/mole);
  G4Isotope* B10 = new G4Isotope("Boron-10", 5,5,10.013*g/mole);
  G4Element* B = new G4Element("Boron", "B",  2);
  B->AddIsotope(B11, 80.*perCent);
  B->AddIsotope(B10, 20.*perCent);
  BPE = new G4Material("B-Poly",density,2);
  BPE->AddMaterial(PE,95.*perCent);
  BPE->AddElement(B,5.*perCent);
  

  PrimaryGeneratorAction src;
  G4ThreeVector shieldPos = src.sourcePos;

  G4double srcX = 12*cm; //space reserved for the source
  G4double srcY = 37.5*cm;
  G4double srcZ = 12*cm;

  G4VSolid* srcS = new G4Box("source",
		      srcX/2, srcY/2, srcZ/2);

  G4VSolid* polyCut = new G4Box("Poly",
			       srcX/2 + polyThickness,
			       srcY/2 + polyThickness,
			       srcZ/2 + polyThickness);

  G4VSolid* pbCut = new G4Box("Lead",
			srcX/2 + polyThickness + pbThickness,
			srcY/2 + polyThickness + pbThickness,
			srcZ/2 + polyThickness + pbThickness);
  
  G4VSolid* windowCut = new G4Box("Window",
				  windowX/2,
				  polyThickness/2 + pbThickness/2 + 2*cm,
				  windowY/2);

  G4VSolid* polyShieldS;
  G4VSolid* pbShieldS;

  if(window){

    G4VSolid* polyShieldInter = new G4SubtractionSolid("Poly Shield", polyCut, srcS); 
    G4VSolid* pbShieldInter = new G4SubtractionSolid("Lead Shield", pbCut, polyCut);
    polyShieldS = new G4SubtractionSolid("Poly Shield", polyShieldInter, windowCut, NULL, G4ThreeVector(0, srcY/2 +polyThickness/2 + pbThickness/2, 0)); 
    pbShieldS = new G4SubtractionSolid("Lead Shield", pbShieldInter, windowCut, NULL, G4ThreeVector(0, srcY/2 +polyThickness/2 + pbThickness/2, 0) );
  }else{
    polyShieldS = new G4SubtractionSolid("Poly Shield", polyCut, srcS); 
    pbShieldS = new G4SubtractionSolid("Lead Shield", pbCut, polyCut);
  }
  
  polyShieldL = new G4LogicalVolume(polyShieldS,
				    BPE,
				    "Poly");

  polyShieldP = new G4PVPlacement(0,
				  shieldPos,
				  polyShieldL,
				  "Poly Shield",
				  worldL,
				  false,
				  0,
				  checkOverlaps);


  pbShieldL = new G4LogicalVolume(pbShieldS,
				  pbShieldMat,
				  "Lead");

  pbShieldP = new G4PVPlacement(0,
				shieldPos,
				pbShieldL,
				"Lead Shield",
				worldL,
				false,
				0,
				checkOverlaps);

  G4VSolid* monitorS = new G4Sphere("Monitor",
				    0 * cm, monitorR,
				    0.0 * deg, 360.00 * deg,
				    0.0 * deg, 360.00 * deg);
  
  monitorL = new G4LogicalVolume(monitorS,
				 polyShieldMat,
				 "Monitor");

  monitorP = new G4PVPlacement(0,
			       shieldPos + G4ThreeVector(0, monitorD, 0),
			       monitorL,
			       "Monitor",
			       worldL,
			       false,
			       0,
			       checkOverlaps);
  
				   

	   

  		      
  //always return the root volume
  //
  return worldP;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetPolyThickness(G4double thk)
{
  polyThickness = thk;
  G4RunManager::GetRunManager()->ReinitializeGeometry();

}


void DetectorConstruction::SetLeadThickness(G4double thk)
{
  pbThickness = thk;
  G4RunManager::GetRunManager()->ReinitializeGeometry();

}

void DetectorConstruction::PrintParameters()
{
  G4cout << "\n The World is " << G4BestUnit(fBoxX,"Length")
	 << "x" << G4BestUnit(fBoxY, "Length")
	 << "x" << G4BestUnit(fBoxY, "Length")
         << " of " << fMaterial->GetName() 
         << "\n \n" << fMaterial << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetMaterial(G4String materialChoice)
{
  // search the material by its name
  G4Material* pttoMaterial =
     G4NistManager::Instance()->FindOrBuildMaterial(materialChoice);   
  
  if (pttoMaterial) { 
    if(fMaterial != pttoMaterial) {
      fMaterial = pttoMaterial;
      if(worldL) { worldL->SetMaterial(pttoMaterial); }
      G4RunManager::GetRunManager()->PhysicsHasBeenModified();
    }
  } else {
    G4cout << "\n--> warning from DetectorConstruction::SetMaterial : "
           << materialChoice << " not found" << G4endl;
  }              
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetSize(G4double x, G4double y, G4double z)
{
  fBoxX = x;
  fBoxY = y;
  fBoxZ = z;
  G4RunManager::GetRunManager()->ReinitializeGeometry();
}

void DetectorConstruction::SetWindow(G4bool w){
  window = w;
}

void DetectorConstruction::SetWindowSize(G4double x){
  windowX = x;
  windowY = x;
}

void DetectorConstruction::SetMonitorRadius(G4double r){
  monitorR = r;
}

void DetectorConstruction::SetMonitorDistance(G4double d){
  monitorD = d;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

