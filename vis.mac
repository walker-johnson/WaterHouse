#
# Macro file for the initialization phase of "TestEm6.cc"
#
# Sets some default verbose
# and initializes the graphic.
#
/control/verbose 2
/run/verbose 2
#
/run/initialize
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
/vis/set/touchable World 0 tp4 0 tp3 0 tp2 0 tp1 0 Water 0 
/vis/touchable/set/colour 0.0666667 0.811765 0.909804 1
/vis/set/touchable World 0 tp4 0 tp3 0 tp2 0 tp1 0 Monitor 0
/vis/touchable/set/colour 0.886275 0.133333 0.133333 1
/vis/touchable/set/visibility true
/vis/set/touchable World 0 tp4 0 tp3 0 tp2 0 tp1 0 polyShield 0
/vis/touchable/set/colour 0.694118 0.0509804 0.65098 1
/vis/touchable/set/visibility true
/vis/set/touchable World 0 tp4 0 tp3 0 tp2 0 tp1 0 leadShield 0
/vis/touchable/set/colour 0.756863 0.490196 0.0666667 1
/vis/touchable/set/visibility true
/vis/set/touchable World 0
/vis/touchable/set/visibility false
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 40. 20.
#
# Specify zoom value:
/vis/viewer/zoom 1.4
#
# Specify style (surface or wireframe):
#/vis/viewer/set/style surface
#
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts false
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue
#/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set geantino green
/vis/modeling/trajectories/drawByParticleID-0/set e- yellow
/vis/modeling/trajectories/drawByParticleID-0/set e+ blue
/vis/modeling/trajectories/drawByParticleID-0/set proton cyan
/vis/modeling/trajectories/drawByParticleID-0/set gamma red
/vis/modeling/trajectories/drawByParticleID-0/set anti_nu_e grey
/vis/modeling/trajectories/drawByParticleID-0/set neutron green
/vis/modeling/trajectories/drawByParticleID-0/set alpha blue

# Don't draw gammas
/vis/filtering/trajectories/create/particleFilter
/vis/filtering/trajectories/particleFilter-0/add gamma
/vis/filtering/trajectories/particleFilter-0/invert true
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
